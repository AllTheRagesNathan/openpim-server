type Query {
  me: User
  getRoles: [Role] 
  getUsers: [User] 
  hasLogin(login: String!): Boolean!
  getTenants: [ID]
  getTenantUsers(tenantId: ID!): [User]
}

type Mutation {
  signInAs(id: ID!): LoginResponse!
  signIn(login: String!, password: String!): LoginResponse!
  reloadModel(tenantId: ID!): Boolean!
  createUser(login: String!, name: String!, password: String!, email: String, roles: JSON, props: JSONObject): ID!
  updateUser(id: ID!, name: String, password: String, email: String, roles: JSON, props: JSONObject): ID!
  removeUser(id: ID!) : Boolean!
  createRole(identifier: String!, name: String!, configAccess: JSONObject, relAccess: JSONObject, itemAccess: JSONObject): ID!
  updateRole(id: ID!, name: String, configAccess: JSONObject, relAccess: JSONObject, itemAccess: JSONObject) : ID!
  removeRole(id: ID!) : Boolean!
}

type LoginResponse {
  token: String!
  user: User!
}

type User {
  id: ID!
  internalId: Int!
  tenantId: ID!
  login: String!
  name: String!
  roles: [ID]!
  email: String
  props: JSONObject
  createdBy: String!
  createdAt: UTCDateTime!
  updatedBy: String!
  updatedAt: UTCDateTime!
}

type Role {
  id: ID!
  internalId: Int!
  identifier: String!
  name: String!
  configAccess: JSONObject
  relAccess: JSONObject
  itemAccess: JSONObject
  createdBy: String!
  createdAt: UTCDateTime!
  updatedBy: String!
  updatedAt: UTCDateTime!
}